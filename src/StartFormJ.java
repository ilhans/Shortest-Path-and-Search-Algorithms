
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import javax.swing.JOptionPane;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Alper
 */
public class StartFormJ extends javax.swing.JFrame {

    static Browser browser = new Browser();
    static BrowserView view = new BrowserView(browser);
    String[] cities;
    int ItemStateCounter = 0;
    int ItemStateCounter2 = 0;
    int ItemStateCounter3 = 0;
    int ItemStateCounter4 = 0;
    HashMap<String, Point> cityCoordinates;
    Graph backgroundGraph;
    Algorithm selectedAlgorithm;

    public StartFormJ() {
        initComponents();
        view.setSize(625, 607);
        jPanel1.add(view, BorderLayout.CENTER);
        cities = ReadCitiesFromFile(new File("cities.txt"));
        loadCitiesIntoComboBox();
        cityCoordinates = FillCoordinates();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 255, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 625, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jComboBox1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel1.setText("Select Start Point");

        jLabel2.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel2.setText("Select Destination Point");

        jComboBox2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel3.setText("Select Algorithm");

        jComboBox3.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Bellman - Ford ", "Floyd Warshall", "Dijkstra", "Nearest Neighbour", "Hill Climbing", "Best First Search", "A* Algorithm", "Iterative Deepening" }));
        jComboBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel4.setText("Select Measurement");

        jComboBox4.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Driving Distance", "Driving Time" }));
        jComboBox4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel5.setText("Exclude City");

        jComboBox5.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose" }));
        jComboBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox3, 0, 286, Short.MAX_VALUE)
                    .addComponent(jComboBox4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jComboBox5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

        double a = 38.418937;
        double b = 27.131895;
        if (ItemStateCounter > 0) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                if (jComboBox1.getSelectedIndex() != 0) {
                    String selectedInd = jComboBox1.getSelectedItem().toString();
                    Point selectedCity = cityCoordinates.get(selectedInd);
                    browser.executeJavaScript(""
                            + "CentralPark = new google.maps.LatLng(" + selectedCity.getLatitude() + "," + selectedCity.getLongitude() + ");"
                            + "addMarker(CentralPark);");
                    jComboBox1.setEnabled(false);
                }
            }
        }
        ItemStateCounter++;
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        if (ItemStateCounter2 > 0) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                if (jComboBox2.getSelectedIndex() != 0) {
                    String selectedInd = jComboBox2.getSelectedItem().toString();
                    Point selectedCity = cityCoordinates.get(selectedInd);
                    browser.executeJavaScript(""
                            + "CentralPark2 = new google.maps.LatLng(" + selectedCity.getLatitude() + "," + selectedCity.getLongitude() + ");"
                            + "addMarker(CentralPark2);");
                    jComboBox2.setEnabled(false);
                }
            }
        }
        ItemStateCounter2++;
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        reset();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        if (ItemStateCounter3 > 0) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                jComboBox3.setEnabled(false);
            }
        }
        ItemStateCounter3++;
    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jComboBox4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
        if (ItemStateCounter4 > 0) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                jComboBox4.setEnabled(false);
            }
        }
        ItemStateCounter4++;
    }//GEN-LAST:event_jComboBox4ItemStateChanged


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (jComboBox1.isEnabled() || jComboBox2.isEnabled() || jComboBox3.isEnabled() || jComboBox4.isEnabled()) {
            JOptionPane.showMessageDialog(null, "All Fields Must be Filled to Continue!", "Error!", JOptionPane.ERROR_MESSAGE);
        } else if (jComboBox5.getSelectedItem().toString() == "Choose") {

            if (jComboBox4.getSelectedIndex() != 0) {
                backgroundGraph = preProcess(jComboBox4.getSelectedIndex());
                String cityOfOrigin = jComboBox1.getSelectedItem().toString();
                String targetCity = jComboBox2.getSelectedItem().toString();
                int method = jComboBox3.getSelectedIndex();
                if (backgroundGraph != null) {
                    if (method == 1) {
                        selectedAlgorithm = new BellmanFordAlgorithm(backgroundGraph, new Vertex(cityOfOrigin));
                        selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                    } else if (method == 2) {
                        selectedAlgorithm = new FloydWarshallAlgorithm(backgroundGraph);
                        selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                    } else if (method == 3) {
                        selectedAlgorithm = new DijkstraAlgorithm(backgroundGraph);
                        selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                    } else if (method == 4) {
                        selectedAlgorithm = new NearestNeighbour(backgroundGraph);
                        selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                    } else if (method == 5) {
                        selectedAlgorithm = new HillClimbing(backgroundGraph);
                        selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                    } else if (method == 6) {
                        selectedAlgorithm = new BestFirstSearch(backgroundGraph);
                        selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                    } else if (method == 7) {
                        selectedAlgorithm = new AStarAlgorithm(backgroundGraph);
                        selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                    } else if (method == 8) {
                        selectedAlgorithm = new IterativeDeepening(backgroundGraph);
                        selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                    }
                    DisplayFrame frame = new DisplayFrame(selectedAlgorithm.PrintDistance(cityOfOrigin, targetCity), selectedAlgorithm.PrintPath(cityOfOrigin, targetCity),
                            jComboBox4.getSelectedIndex(), selectedAlgorithm.getNameOfAlgorithm(),
                            cityOfOrigin, targetCity);

                    if (selectedAlgorithm instanceof NearestNeighbour) {
                        NearestNeighbour sel2 = (NearestNeighbour) selectedAlgorithm;
                        if (sel2.targetReached) {

                            Point selectedCity = cityCoordinates.get(cityOfOrigin);
                            Point selectedCity2 = cityCoordinates.get(targetCity);
                            String javastr = "start =  new google.maps.LatLng(" + selectedCity.getLatitude() + "," + selectedCity.getLongitude() + ");"
                                    + "end = new google.maps.LatLng(" + selectedCity2.getLatitude() + "," + selectedCity2.getLongitude() + ");";
                            // browser.executeJavaScript(javastr);
                            List<String> path = selectedAlgorithm.PrintPath(cityOfOrigin, targetCity);
                            for (int i = 1; i < path.size() - 1; i++) {
                                Point nextPoint = cityCoordinates.get(path.get(i));
                                System.out.println(path.get(i));
                                System.out.println(nextPoint.getLatitude() + " " + nextPoint.getLongitude());
                                javastr += "waypts.push({location: new google.maps.LatLng(" + nextPoint.getLatitude() + "," + nextPoint.getLongitude() + "),stopover: true});";
                            }
                            javastr += "displayRoute(start,end);";
                            browser.executeJavaScript(javastr);

                        } else {
                            JOptionPane.showMessageDialog(null, "No Viable Route is found!", "Error!", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        Point selectedCity = cityCoordinates.get(cityOfOrigin);
                        Point selectedCity2 = cityCoordinates.get(targetCity);
                        String javastr = "start =  new google.maps.LatLng(" + selectedCity.getLatitude() + "," + selectedCity.getLongitude() + ");"
                                + "end = new google.maps.LatLng(" + selectedCity2.getLatitude() + "," + selectedCity2.getLongitude() + ");";
                        // browser.executeJavaScript(javastr);
                        List<String> path = selectedAlgorithm.PrintPath(cityOfOrigin, targetCity);
                        for (int i = 1; i < path.size() - 1; i++) {
                            Point nextPoint = cityCoordinates.get(path.get(i));
                            System.out.println(path.get(i));
                            System.out.println(nextPoint.getLatitude() + " " + nextPoint.getLongitude());
                            javastr += "waypts.push({location: new google.maps.LatLng(" + nextPoint.getLatitude() + "," + nextPoint.getLongitude() + "),stopover: true});";
                        }
                        javastr += "displayRoute(start,end);";
                        browser.executeJavaScript(javastr);

                    }
                    frame.setVisible(true);
                }
            }
        } else //            System.out.println(jComboBox5.getSelectedIndex() - 1);
        //            preProcessExcludeCity(1, jComboBox5.getSelectedIndex() - 1);
        if (jComboBox4.getSelectedIndex() != 0) {
            backgroundGraph = preProcessExcludeCity(jComboBox4.getSelectedIndex(), jComboBox5.getSelectedIndex() - 1);
            String cityOfOrigin = jComboBox1.getSelectedItem().toString();
            String targetCity = jComboBox2.getSelectedItem().toString();
            int method = jComboBox3.getSelectedIndex();
            if (backgroundGraph != null) {
                if (method == 1) {
                    selectedAlgorithm = new BellmanFordAlgorithm(backgroundGraph, new Vertex(cityOfOrigin));
                    selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                } else if (method == 2) {
                    selectedAlgorithm = new FloydWarshallAlgorithm(backgroundGraph);
                    selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                } else if (method == 3) {
                    selectedAlgorithm = new DijkstraAlgorithm(backgroundGraph);
                    selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                } else if (method == 4) {
                    selectedAlgorithm = new NearestNeighbour(backgroundGraph);
                    selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                } else if (method == 5) {
                    selectedAlgorithm = new HillClimbing(backgroundGraph);
                    selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                } else if (method == 6) {
                    selectedAlgorithm = new BestFirstSearch(backgroundGraph);
                    selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                } else if (method == 7) {
                    selectedAlgorithm = new AStarAlgorithm(backgroundGraph);
                    selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                } else if (method == 8) {
                    selectedAlgorithm = new IterativeDeepening(backgroundGraph);
                    selectedAlgorithm.startAlgorithm(cityOfOrigin, targetCity);
                }
                DisplayFrame frame = new DisplayFrame(selectedAlgorithm.PrintDistance(cityOfOrigin, targetCity), selectedAlgorithm.PrintPath(cityOfOrigin, targetCity),
                        jComboBox4.getSelectedIndex(), selectedAlgorithm.getNameOfAlgorithm(),
                        cityOfOrigin, targetCity);

                if (selectedAlgorithm instanceof NearestNeighbour) {
                    NearestNeighbour sel2 = (NearestNeighbour) selectedAlgorithm;
                    if (sel2.targetReached) {

                        Point selectedCity = cityCoordinates.get(cityOfOrigin);
                        Point selectedCity2 = cityCoordinates.get(targetCity);
                        String javastr = "start =  new google.maps.LatLng(" + selectedCity.getLatitude() + "," + selectedCity.getLongitude() + ");"
                                + "end = new google.maps.LatLng(" + selectedCity2.getLatitude() + "," + selectedCity2.getLongitude() + ");";
                        // browser.executeJavaScript(javastr);
                        List<String> path = selectedAlgorithm.PrintPath(cityOfOrigin, targetCity);
                        for (int i = 1; i < path.size() - 1; i++) {
                            Point nextPoint = cityCoordinates.get(path.get(i));
                            System.out.println(path.get(i));
                            System.out.println(nextPoint.getLatitude() + " " + nextPoint.getLongitude());
                            javastr += "waypts.push({location: new google.maps.LatLng(" + nextPoint.getLatitude() + "," + nextPoint.getLongitude() + "),stopover: true});";
                        }
                        javastr += "displayRoute(start,end);";
                        browser.executeJavaScript(javastr);

                    } else {
                        JOptionPane.showMessageDialog(null, "No Viable Route is found!", "Error!", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    Point selectedCity = cityCoordinates.get(cityOfOrigin);
                    Point selectedCity2 = cityCoordinates.get(targetCity);
                    String javastr = "start =  new google.maps.LatLng(" + selectedCity.getLatitude() + "," + selectedCity.getLongitude() + ");"
                            + "end = new google.maps.LatLng(" + selectedCity2.getLatitude() + "," + selectedCity2.getLongitude() + ");";
                    // browser.executeJavaScript(javastr);
                    List<String> path = selectedAlgorithm.PrintPath(cityOfOrigin, targetCity);
                    for (int i = 1; i < path.size() - 1; i++) {
                        Point nextPoint = cityCoordinates.get(path.get(i));
                        System.out.println(path.get(i));
                        System.out.println(nextPoint.getLatitude() + " " + nextPoint.getLongitude());
                        javastr += "waypts.push({location: new google.maps.LatLng(" + nextPoint.getLatitude() + "," + nextPoint.getLongitude() + "),stopover: true});";
                    }
                    javastr += "displayRoute(start,end);";
                    browser.executeJavaScript(javastr);

                }
                frame.setVisible(true);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartFormJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartFormJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartFormJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartFormJ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartFormJ().setVisible(true);

            }
        });
        String path = System.getProperty("user.dir");
        browser.loadURL(path + "\\test.html");

    }

    public void loadCitiesIntoComboBox() {
        ArrayList<String> objects = new ArrayList<>(Arrays.asList(cities));
        jComboBox1.removeAllItems();
        jComboBox1.addItem("Choose");
        for (int i = 0; i < objects.size(); i++) {
            jComboBox1.addItem(objects.get(i));
        }
        jComboBox2.removeAllItems();
        jComboBox2.addItem("Choose");
        for (int i = 0; i < objects.size(); i++) {
            jComboBox2.addItem(objects.get(i));
        }

        jComboBox5.removeAllItems();
        jComboBox5.addItem("Choose");
        for (int i = 0; i < objects.size(); i++) {
            jComboBox5.addItem(objects.get(i));
        }
    }

    public static Graph preProcess(int MeasurementInd) {

        int[][] distanceMatrix = ReadMeasuresFromFile(new File("drive_distancesv3.txt"));
        int[][] timeMatrix = ReadMeasuresFromFile(new File("drive_timesv2.txt"));
        String[] cities = ReadCitiesFromFile(new File("cities.txt"));
        HashMap<AirDistanceUnit, Integer> airDistances = ReadAirDistancesFromFile(new File("air_distancesV2.txt"), cities);
        List<Vertex> vertices = createVertices(cities);
        List<DirectedEdge> distanceEdges = createDirectedEdges(vertices, distanceMatrix);
        List<DirectedEdge> timeEdges = createDirectedEdges(vertices, timeMatrix);
        if (MeasurementInd == 1) {
            return new Graph(distanceEdges, vertices, airDistances);
        } else if (MeasurementInd == 2) {
            return new Graph(timeEdges, vertices, airDistances);
        } else {
            return null;
        }
    }

    public static Graph preProcessExcludeCity(int MeasurementInd, int indexOfExcludedCity) {

        int[][] distanceMatrix = ReadMeasuresFromFile(new File("drive_distancesv3.txt"));
        int[][] timeMatrix = ReadMeasuresFromFile(new File("drive_timesv2.txt"));
        String[] cities = ReadCitiesFromFile(new File("cities.txt"));
        HashMap<AirDistanceUnit, Integer> airDistances = ReadAirDistancesFromFile(new File("air_distancesV2.txt"), cities);
        for (int i = 0; i < cities.length; i++) {
            distanceMatrix[i][indexOfExcludedCity] = 99999;
            distanceMatrix[indexOfExcludedCity][i] = 99999;
        }
        for (int j = 0; j < 10; j++) {
            timeMatrix[j][indexOfExcludedCity] = 99999;
            timeMatrix[indexOfExcludedCity][j] = 99999;
        }
//        for (int k = 0; k < 10; k++) {
//            air[i][indexOfExcludedCity] = 99999;
//            distanceMatrix[indexOfExcludedCity][i] = 99999;
//        }

        List<Vertex> vertices = createVertices(cities);
        List<DirectedEdge> distanceEdges = createDirectedEdges(vertices, distanceMatrix);
        List<DirectedEdge> timeEdges = createDirectedEdges(vertices, timeMatrix);
        if (MeasurementInd == 1) {
            return new Graph(distanceEdges, vertices, airDistances);
        } else if (MeasurementInd == 2) {
            return new Graph(timeEdges, vertices, airDistances);
        } else {
            return null;
        }
    }

    public static Graph preProcessNewMap(int MeasurementInd, int indexOfExcludedCity) {

        int[][] distanceMatrix = ReadMeasuresFromFile(new File("drive_distancesv3.txt"));
        int[][] timeMatrix = ReadMeasuresFromFile(new File("drive_timesv2.txt"));
        String[] cities = ReadCitiesFromFile(new File("cities.txt"));
        HashMap<AirDistanceUnit, Integer> airDistances = ReadAirDistancesFromFile(new File("air_distancesV2.txt"), cities);
        for (int i = 0; i < cities.length; i++) {
            distanceMatrix[i][indexOfExcludedCity] = 99999;
            distanceMatrix[indexOfExcludedCity][i] = 99999;
        }
        for (int j = 0; j < 10; j++) {
            timeMatrix[j][indexOfExcludedCity] = 99999;
            timeMatrix[indexOfExcludedCity][j] = 99999;
        }
//        for (int k = 0; k < 10; k++) {
//            air[i][indexOfExcludedCity] = 99999;
//            distanceMatrix[indexOfExcludedCity][i] = 99999;
//        }

        List<Vertex> vertices = createVertices(cities);
        List<DirectedEdge> distanceEdges = createDirectedEdges(vertices, distanceMatrix);
        List<DirectedEdge> timeEdges = createDirectedEdges(vertices, timeMatrix);
        if (MeasurementInd == 1) {
            return new Graph(distanceEdges, vertices, airDistances);
        } else if (MeasurementInd == 2) {
            return new Graph(timeEdges, vertices, airDistances);
        } else {
            return null;
        }
    }

    public static int[][] ReadMeasuresFromFile(File file) {
        int[][] distanceMatrix = new int[21][21];
        try {
            Scanner inputFile = new Scanner(file);
            int Rowcounter = 0;
            int Columncounter = 0;

            while (inputFile.hasNextInt()) {
                if (Columncounter == 21) {
                    Columncounter = 0;
                    Rowcounter++;
                }
                distanceMatrix[Rowcounter][Columncounter] = inputFile.nextInt();
                Columncounter++;
            }
        } catch (FileNotFoundException ex) {
            System.err.println("Error when reading the file!");
        }

        return distanceMatrix;
    }

    public static String[] ReadCitiesFromFile(File file) {
        String[] cities = new String[21];
        try {
            Scanner inputFile = new Scanner(file);
            int counter = 0;
            while (inputFile.hasNextLine()) {
                cities[counter] = inputFile.nextLine().trim();
                counter++;
            }
        } catch (FileNotFoundException ex) {
            System.err.println("Error when reading the file!");
        }

        return cities;
    }

    public static List<Vertex> createVertices(String cities[]) {
        List<Vertex> cts = new ArrayList<>(21);
        for (int i = 0; i < cities.length; i++) {
            cts.add(new Vertex(cities[i]));
        }
        return cts;
    }

    public static List<DirectedEdge> createDirectedEdges(List<Vertex> vertices, int[][] distanceMatrix) {
        List<DirectedEdge> dEdge = new ArrayList<>();
        for (int i = 0; i < distanceMatrix.length; i++) {
            for (int j = 0; j < distanceMatrix[i].length; j++) {
                dEdge.add(new DirectedEdge(vertices.get(i), vertices.get(j), distanceMatrix[i][j]));
            }

        }
        return dEdge;
    }

    public static Graph createGraph(List<Vertex> vertices, List<DirectedEdge> edges) {
        return new Graph(edges, vertices);
    }

    private HashMap<String, Point> FillCoordinates() {
        HashMap<String, Point> newMap = new HashMap<>();
        newMap.put("Izmir", new Point(38.418937, 27.131895));
        newMap.put("Cesme", new Point(38.314480, 26.301684));
        newMap.put("Antalya", new Point(36.895108, 30.686969));
        newMap.put("Canakkale", new Point(40.127234, 26.422522));
        newMap.put("Balikesir", new Point(39.648489, 27.890404));
        newMap.put("Edirne", new Point(41.663891, 26.557503));
        newMap.put("Tekirdag", new Point(40.990309, 27.520258));
        newMap.put("Bursa", new Point(40.198299, 29.063327));
        newMap.put("Istanbul", new Point(41.032302, 28.984847));
        newMap.put("Alexandroupoli", new Point(40.877315, 25.886077));
        newMap.put("Kesan", new Point(40.842543, 26.601652));
        newMap.put("Kardzali", new Point(41.630369, 25.378022));
        newMap.put("Serres", new Point(41.088004, 23.550164));
        newMap.put("Thessaloniki", new Point(40.635641, 22.943287));
        newMap.put("Sofia", new Point(42.693180, 23.322040));
        newMap.put("Haskovo", new Point(41.929093, 25.560488));
        newMap.put("Athens", new Point(37.979595, 23.731774));
        newMap.put("Skopje", new Point(41.994344, 21.431885));
        newMap.put("Bucharest", new Point(44.424902, 26.103967));
        newMap.put("Ankara", new Point(39.925112, 32.858556));
        newMap.put("Kusadasi", new Point(37.940997, 27.288363));
        return newMap;
    }

    private void reset() {
        String path = System.getProperty("user.dir");
        browser.loadURL(path + "\\test.html");
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
        jComboBox3.setSelectedIndex(0);
        jComboBox4.setSelectedIndex(0);
        jComboBox1.setEnabled(true);
        jComboBox2.setEnabled(true);
        jComboBox3.setEnabled(true);
        jComboBox4.setEnabled(true);
        backgroundGraph = null;
        this.selectedAlgorithm = null;
    }

    public static HashMap<AirDistanceUnit, Integer> ReadAirDistancesFromFile(File file, String[] cities) {
        HashMap<AirDistanceUnit, Integer> distances = new HashMap<>();
        int[][] distanceMatrix = new int[21][21];
        try {
            Scanner inputFile = new Scanner(file);
            int Rowcounter = 0;
            int Columncounter = 0;

            while (inputFile.hasNextInt()) {
                if (Columncounter == 21) {
                    Columncounter = 0;
                    Rowcounter++;
                }
                distanceMatrix[Rowcounter][Columncounter] = inputFile.nextInt();
                Columncounter++;
            }
        } catch (FileNotFoundException ex) {
            System.err.println("Error when reading the file 3!");
        }
        for (int i = 0; i < distanceMatrix.length; i++) {
            for (int j = 0; j < distanceMatrix[i].length; j++) {
                distances.put(new AirDistanceUnit(new Vertex(cities[i]), new Vertex(cities[j])), distanceMatrix[i][j]);
            }
        }
        return distances;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
